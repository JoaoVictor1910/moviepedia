{"version":3,"sources":["components/MovieInfo.js","components/SearchMovie.js","App.js","reportWebVitals.js","index.js"],"names":["MovieInfo","movie","postPath","poster_path","className","src","alt","title","relase_date","vote_average","overview","SearchMovie","useState","query","setQuery","movies","setMovies","url","getMovies","e","a","preventDefault","fetch","result","json","data","results","console","log","message","id","onSubmit","type","name","required","onChange","target","value","filter","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA2BeA,EAzBG,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEVC,EAAQ,0DAAsDD,EAAME,aAE1E,OACI,mCACA,qBAAKC,UAAU,YAAf,SACI,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,aAAf,SACI,qBAAKC,IAAKH,EAAUI,IAAKL,EAAMM,UAEnC,sBAAKH,UAAU,YAAf,UACI,6BAAKH,EAAMM,QACX,iDAAoBN,EAAMO,eAC1B,+CAAkBP,EAAMQ,gBACxB,qBAAKL,UAAU,WAAf,SACKH,EAAMS,sBCuBhBC,EArCK,WAAO,IAAD,EAEIC,mBAAS,IAFb,mBAEfC,EAFe,KAERC,EAFQ,OAGMF,mBAAS,IAHf,mBAGfG,EAHe,KAGPC,EAHO,KAIhBC,EAAG,kHAA8GJ,EAA9G,+BAEHK,EAAS,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAEVD,EAAEE,iBAFQ,SAGWC,MAAML,GAHjB,cAGJM,EAHI,gBAISA,EAAOC,OAJhB,OAIJC,EAJI,OAKVT,EAAUS,EAAKC,SALL,kDAOVC,QAAQC,IAAI,OAAQ,KAAMC,SAPhB,0DAAH,sDAWf,OACI,mCACA,sBAAKC,GAAG,UAAU1B,UAAU,UAAU2B,SAAUb,EAAhD,UACI,uBAAMd,UAAU,eAAhB,UACI,uBAAOA,UAAU,aAAjB,yBACA,uBAAOA,UAAU,aAAa4B,KAAK,OAAOC,KAAK,QAAQC,UAAQ,EAACC,SAC5D,SAAAhB,GAAC,OAAIL,EAASK,EAAEiB,OAAOC,UAE3B,wBAAQjC,UAAU,cAAc4B,KAAK,SAArC,uBAEJ,qBAAK5B,UAAU,YAAf,SAEQW,EAAOuB,QAAO,SAAArC,GAAK,OAAIA,EAAME,eAAaoC,KAAI,SAAAtC,GAAK,OAAI,cAAC,EAAD,CAAWA,MAAOA,GAAYA,EAAM6B,eCnBhGU,MAVf,WACE,OACE,sBAAKpC,UAAU,YAAf,UACE,qBAAIA,UAAU,QAAQ0B,GAAG,YAAzB,UAAqC,gDAArC,2BAEA,cAAC,EAAD,QCGSW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.beed963b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst MovieInfo = ({movie}) => {\r\n\r\n    const postPath = `https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`\r\n\r\n    return (\r\n        <>\r\n        <div className=\"card-flip\">\r\n            <div className=\"card-inner\">\r\n                <div className=\"card-front\">\r\n                    <img src={postPath} alt={movie.title} />\r\n                </div>\r\n                <div className=\"card-back\">\r\n                    <h1>{movie.title}</h1>\r\n                    <h3>Realease Date: {movie.relase_date}</h3>\r\n                    <p>Vote Average: {movie.vote_average}</p>\r\n                    <div className=\"overview\">\r\n                        {movie.overview}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MovieInfo\r\n","import React, {useState} from 'react';\r\nimport MovieInfo from './MovieInfo';\r\n\r\n\r\nconst SearchMovie = () => {\r\n\r\n    const [query, setQuery] = useState(\"\");\r\n    const [movies, setMovies] = useState([]);\r\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=5dcf7f28a88be0edc01bbbde06f024ab&language=en-US&query=${query}&page=1&include_adult=false`;\r\n\r\n    const getMovies = async (e) => {\r\n        try{\r\n            e.preventDefault();\r\n            const result = await fetch(url);\r\n            const data = await result.json();\r\n            setMovies(data.results);\r\n        } catch (error){\r\n            console.log('oops', error.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div id=\"content\" className=\"section\" onSubmit={getMovies}>\r\n            <form className=\"form-control\">\r\n                <label className=\"form-label\">Enter title</label>\r\n                <input className=\"form-input\" type=\"text\" name=\"query\" required onChange={\r\n                    e => setQuery(e.target.value)\r\n                } />\r\n                <button className=\"form-button\" type=\"submit\">Search</button>\r\n            </form>\r\n            <div className=\"card-list\">\r\n                {\r\n                    movies.filter(movie => movie.poster_path).map(movie => <MovieInfo movie={movie} key={movie.id} />)\r\n                }\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchMovie\r\n","import React from 'react';\nimport './App.css';\nimport SearchMovie from './components/SearchMovie';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\" id=\"startShow\"><span>Moviepedia -</span> Search for any movie</h1>\n\n      <SearchMovie />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}